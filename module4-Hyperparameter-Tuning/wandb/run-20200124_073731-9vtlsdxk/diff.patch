diff --git a/module3-Intro-to-Keras/LS_DS_423_Keras_Lecture.ipynb b/module3-Intro-to-Keras/LS_DS_423_Keras_Lecture.ipynb
index 5515f11..e718bf3 100644
--- a/module3-Intro-to-Keras/LS_DS_423_Keras_Lecture.ipynb
+++ b/module3-Intro-to-Keras/LS_DS_423_Keras_Lecture.ipynb
@@ -2513,7 +2513,7 @@
    "version": "0.3.2"
   },
   "kernelspec": {
-   "display_name": "U4-S1-NN (v1)",
+   "display_name": "U4-S2-NN(v1)",
    "language": "python",
    "name": "u4-s2-nn"
   },
diff --git a/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Assignment.ipynb b/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Assignment.ipynb
index ca65dc6..a924370 100644
--- a/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Assignment.ipynb
+++ b/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Assignment.ipynb
@@ -41,7 +41,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 1,
    "metadata": {
     "colab": {},
     "colab_type": "code",
@@ -49,9 +49,849 @@
    },
    "outputs": [],
    "source": [
-    "##### Your Code Here #####"
+    "##### Your Code Here #####\n",
+    "import pandas as pd\n",
+    "url = \"https://raw.githubusercontent.com/michhottinger/DS-Unit-4-Sprint-2-Neural-Networks/master/WA_Fn-UseC_-Telco-Customer-Churn%2B(1).csv\"\n",
+    "df = pd.read_csv(url)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>customerID</th>\n",
+       "      <th>gender</th>\n",
+       "      <th>SeniorCitizen</th>\n",
+       "      <th>Partner</th>\n",
+       "      <th>Dependents</th>\n",
+       "      <th>tenure</th>\n",
+       "      <th>PhoneService</th>\n",
+       "      <th>MultipleLines</th>\n",
+       "      <th>InternetService</th>\n",
+       "      <th>OnlineSecurity</th>\n",
+       "      <th>...</th>\n",
+       "      <th>DeviceProtection</th>\n",
+       "      <th>TechSupport</th>\n",
+       "      <th>StreamingTV</th>\n",
+       "      <th>StreamingMovies</th>\n",
+       "      <th>Contract</th>\n",
+       "      <th>PaperlessBilling</th>\n",
+       "      <th>PaymentMethod</th>\n",
+       "      <th>MonthlyCharges</th>\n",
+       "      <th>TotalCharges</th>\n",
+       "      <th>Churn</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>7590-VHVEG</td>\n",
+       "      <td>Female</td>\n",
+       "      <td>0</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>No</td>\n",
+       "      <td>1</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No phone service</td>\n",
+       "      <td>DSL</td>\n",
+       "      <td>No</td>\n",
+       "      <td>...</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>Month-to-month</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>Electronic check</td>\n",
+       "      <td>29.85</td>\n",
+       "      <td>29.85</td>\n",
+       "      <td>No</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>5575-GNVDE</td>\n",
+       "      <td>Male</td>\n",
+       "      <td>0</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>34</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>No</td>\n",
+       "      <td>DSL</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>One year</td>\n",
+       "      <td>No</td>\n",
+       "      <td>Mailed check</td>\n",
+       "      <td>56.95</td>\n",
+       "      <td>1889.5</td>\n",
+       "      <td>No</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>3668-QPYBK</td>\n",
+       "      <td>Male</td>\n",
+       "      <td>0</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>2</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>No</td>\n",
+       "      <td>DSL</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>...</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>Month-to-month</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>Mailed check</td>\n",
+       "      <td>53.85</td>\n",
+       "      <td>108.15</td>\n",
+       "      <td>Yes</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>7795-CFOCW</td>\n",
+       "      <td>Male</td>\n",
+       "      <td>0</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>45</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No phone service</td>\n",
+       "      <td>DSL</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>...</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>One year</td>\n",
+       "      <td>No</td>\n",
+       "      <td>Bank transfer (automatic)</td>\n",
+       "      <td>42.30</td>\n",
+       "      <td>1840.75</td>\n",
+       "      <td>No</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>9237-HQITU</td>\n",
+       "      <td>Female</td>\n",
+       "      <td>0</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>2</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>No</td>\n",
+       "      <td>Fiber optic</td>\n",
+       "      <td>No</td>\n",
+       "      <td>...</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>No</td>\n",
+       "      <td>Month-to-month</td>\n",
+       "      <td>Yes</td>\n",
+       "      <td>Electronic check</td>\n",
+       "      <td>70.70</td>\n",
+       "      <td>151.65</td>\n",
+       "      <td>Yes</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>5 rows Ã— 21 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
+       "0  7590-VHVEG  Female              0     Yes         No       1           No   \n",
+       "1  5575-GNVDE    Male              0      No         No      34          Yes   \n",
+       "2  3668-QPYBK    Male              0      No         No       2          Yes   \n",
+       "3  7795-CFOCW    Male              0      No         No      45           No   \n",
+       "4  9237-HQITU  Female              0      No         No       2          Yes   \n",
+       "\n",
+       "      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n",
+       "0  No phone service             DSL             No  ...               No   \n",
+       "1                No             DSL            Yes  ...              Yes   \n",
+       "2                No             DSL            Yes  ...               No   \n",
+       "3  No phone service             DSL            Yes  ...              Yes   \n",
+       "4                No     Fiber optic             No  ...               No   \n",
+       "\n",
+       "  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n",
+       "0          No          No              No  Month-to-month              Yes   \n",
+       "1          No          No              No        One year               No   \n",
+       "2          No          No              No  Month-to-month              Yes   \n",
+       "3         Yes          No              No        One year               No   \n",
+       "4          No          No              No  Month-to-month              Yes   \n",
+       "\n",
+       "               PaymentMethod MonthlyCharges  TotalCharges Churn  \n",
+       "0           Electronic check          29.85         29.85    No  \n",
+       "1               Mailed check          56.95        1889.5    No  \n",
+       "2               Mailed check          53.85        108.15   Yes  \n",
+       "3  Bank transfer (automatic)          42.30       1840.75    No  \n",
+       "4           Electronic check          70.70        151.65   Yes  \n",
+       "\n",
+       "[5 rows x 21 columns]"
+      ]
+     },
+     "execution_count": 2,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "df.head(5)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "       SeniorCitizen       tenure  MonthlyCharges\n",
+      "count    7043.000000  7043.000000     7043.000000\n",
+      "mean        0.162147    32.371149       64.761692\n",
+      "std         0.368612    24.559481       30.090047\n",
+      "min         0.000000     0.000000       18.250000\n",
+      "25%         0.000000     9.000000       35.500000\n",
+      "50%         0.000000    29.000000       70.350000\n",
+      "75%         0.000000    55.000000       89.850000\n",
+      "max         1.000000    72.000000      118.750000\n",
+      "(7043, 21)\n",
+      "customerID          0\n",
+      "gender              0\n",
+      "SeniorCitizen       0\n",
+      "Partner             0\n",
+      "Dependents          0\n",
+      "tenure              0\n",
+      "PhoneService        0\n",
+      "MultipleLines       0\n",
+      "InternetService     0\n",
+      "OnlineSecurity      0\n",
+      "OnlineBackup        0\n",
+      "DeviceProtection    0\n",
+      "TechSupport         0\n",
+      "StreamingTV         0\n",
+      "StreamingMovies     0\n",
+      "Contract            0\n",
+      "PaperlessBilling    0\n",
+      "PaymentMethod       0\n",
+      "MonthlyCharges      0\n",
+      "TotalCharges        0\n",
+      "Churn               0\n",
+      "dtype: int64\n",
+      "customerID           object\n",
+      "gender               object\n",
+      "SeniorCitizen         int64\n",
+      "Partner              object\n",
+      "Dependents           object\n",
+      "tenure                int64\n",
+      "PhoneService         object\n",
+      "MultipleLines        object\n",
+      "InternetService      object\n",
+      "OnlineSecurity       object\n",
+      "OnlineBackup         object\n",
+      "DeviceProtection     object\n",
+      "TechSupport          object\n",
+      "StreamingTV          object\n",
+      "StreamingMovies      object\n",
+      "Contract             object\n",
+      "PaperlessBilling     object\n",
+      "PaymentMethod        object\n",
+      "MonthlyCharges      float64\n",
+      "TotalCharges         object\n",
+      "Churn                object\n",
+      "dtype: object\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(df.describe())\n",
+    "print(df.shape)\n",
+    "print(df.isna().sum())\n",
+    "print(df.dtypes)\n",
+    "df.Churn = df.Churn.replace(to_replace=['No', 'Yes'], value=['0', '1']).astype(int)\n",
+    "df.Contract = df.Contract.replace(to_replace=['Month-to-month', 'One year', 'Two year'], value=['0', '1', '2']).astype(int)\n",
+    "df.PaperlessBilling = df.PaperlessBilling.replace(to_replace=['No', 'Yes'], value=['0', '1']).astype(int)\n",
+    "df.PaymentMethod = df.PaymentMethod.replace(to_replace=['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)' ], value=['0', '1', '2', '3']).astype(int)\n",
+    "df.StreamingMovies = df.StreamingMovies.replace(to_replace=['No', 'Yes', 'No internet service'], value=['0', '1', '2']).astype(int)\n",
+    "df.StreamingTV = df.StreamingTV.replace(to_replace=['No', 'Yes', 'No internet service'], value=['0', '1', '2']).astype(int)\n",
+    "df.TechSupport = df.TechSupport.replace(to_replace=['No', 'Yes', 'No internet service'], value=['0', '1', '2']).astype(int)\n",
+    "df.DeviceProtection = df.DeviceProtection.replace(to_replace=['No', 'Yes', 'No internet service'], value=['0', '1', '2']).astype(int)\n",
+    "df.PhoneService = df.PhoneService.replace(to_replace=['No', 'Yes'], value=['0', '1']).astype(int)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "df.gender = df.gender.astype('category')\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "df['gender_cat'] = df['gender'].cat.codes\n",
+    "df.Partner = df.Partner.replace(to_replace=['No', 'Yes'], value=['0', '1']).astype(int)\n",
+    "df.Dependents = df.Dependents.replace(to_replace=['No', 'Yes'], value=['0', '1']).astype(int)\n",
+    "df.MultipleLines = df.MultipleLines.replace(to_replace=['No', 'Yes', 'No phone service'], value=['0', '1', '2']).astype(int)\n",
+    "df.InternetService = df.InternetService.replace(to_replace=['No', 'DSL', 'Fiber optic'], value=['0', '1', '2']).astype(int)\n",
+    "df.OnlineSecurity = df.OnlineSecurity.replace(to_replace=['No', 'Yes', 'No internet service'], value=['0', '1', '2']).astype(int)\n",
+    "df.OnlineBackup = df.OnlineBackup.replace(to_replace=['No', 'Yes', 'No internet service'], value=['0', '1', '2']).astype(int)\n",
+    "\n",
+    "\n",
+    "\n"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "df.TotalCharges = pd.to_numeric(df['TotalCharges'], errors='coerce')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "customerID            object\n",
+       "gender              category\n",
+       "SeniorCitizen          int64\n",
+       "Partner                int64\n",
+       "Dependents             int64\n",
+       "tenure                 int64\n",
+       "PhoneService           int64\n",
+       "MultipleLines          int64\n",
+       "InternetService        int64\n",
+       "OnlineSecurity         int64\n",
+       "OnlineBackup           int64\n",
+       "DeviceProtection       int64\n",
+       "TechSupport            int64\n",
+       "StreamingTV            int64\n",
+       "StreamingMovies        int64\n",
+       "Contract               int64\n",
+       "PaperlessBilling       int64\n",
+       "PaymentMethod          int64\n",
+       "MonthlyCharges       float64\n",
+       "TotalCharges         float64\n",
+       "Churn                  int64\n",
+       "gender_cat              int8\n",
+       "dtype: object"
+      ]
+     },
+     "execution_count": 11,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "df.dtypes"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import numpy as np\n",
+    "from sklearn.model_selection import train_test_split\n",
+    "\n",
+    "# split into input (X) and output (Y) variables\n",
+    "X = df.drop(columns=['Churn', 'customerID', 'gender'])\n",
+    "Y = df['Churn']\n",
+    "\n",
+    "#now hold aside 5% for testing\n",
+    "X_train, X_test, y_train, y_test = train_test_split(\n",
+    "    X, Y, test_size=0.05, random_state=42)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>SeniorCitizen</th>\n",
+       "      <th>Partner</th>\n",
+       "      <th>Dependents</th>\n",
+       "      <th>tenure</th>\n",
+       "      <th>PhoneService</th>\n",
+       "      <th>MultipleLines</th>\n",
+       "      <th>InternetService</th>\n",
+       "      <th>OnlineSecurity</th>\n",
+       "      <th>OnlineBackup</th>\n",
+       "      <th>DeviceProtection</th>\n",
+       "      <th>TechSupport</th>\n",
+       "      <th>StreamingTV</th>\n",
+       "      <th>StreamingMovies</th>\n",
+       "      <th>Contract</th>\n",
+       "      <th>PaperlessBilling</th>\n",
+       "      <th>PaymentMethod</th>\n",
+       "      <th>MonthlyCharges</th>\n",
+       "      <th>TotalCharges</th>\n",
+       "      <th>gender_cat</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>381</th>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>50.65</td>\n",
+       "      <td>50.65</td>\n",
+       "      <td>1</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>6586</th>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>45</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>1</td>\n",
+       "      <td>3</td>\n",
+       "      <td>24.65</td>\n",
+       "      <td>1171.30</td>\n",
+       "      <td>0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4375</th>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>66</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
+       "      <td>114.30</td>\n",
+       "      <td>7383.70</td>\n",
+       "      <td>1</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3240</th>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>54</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>106.55</td>\n",
+       "      <td>5763.30</td>\n",
+       "      <td>0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1599</th>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>70</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>0</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
+       "      <td>80.40</td>\n",
+       "      <td>5717.85</td>\n",
+       "      <td>0</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "      SeniorCitizen  Partner  Dependents  tenure  PhoneService  MultipleLines  \\\n",
+       "381               0        0           0       1             1              0   \n",
+       "6586              0        1           1      45             1              1   \n",
+       "4375              0        0           0      66             1              1   \n",
+       "3240              0        1           0      54             1              1   \n",
+       "1599              0        1           1      70             1              0   \n",
+       "\n",
+       "      InternetService  OnlineSecurity  OnlineBackup  DeviceProtection  \\\n",
+       "381                 1               0             1                 0   \n",
+       "6586                0               2             2                 2   \n",
+       "4375                2               1             1                 1   \n",
+       "3240                2               1             1                 0   \n",
+       "1599                1               0             1                 1   \n",
+       "\n",
+       "      TechSupport  StreamingTV  StreamingMovies  Contract  PaperlessBilling  \\\n",
+       "381             0            0                0         0                 0   \n",
+       "6586            2            2                2         2                 1   \n",
+       "4375            1            1                1         1                 1   \n",
+       "3240            0            1                1         1                 0   \n",
+       "1599            1            1                1         2                 1   \n",
+       "\n",
+       "      PaymentMethod  MonthlyCharges  TotalCharges  gender_cat  \n",
+       "381               1           50.65         50.65           1  \n",
+       "6586              3           24.65       1171.30           0  \n",
+       "4375              2          114.30       7383.70           1  \n",
+       "3240              2          106.55       5763.30           0  \n",
+       "1599              2           80.40       5717.85           0  "
+      ]
+     },
+     "execution_count": 13,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "X_train.head(5)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "#wanted to keep this but I actually don't think this helps the algo\n",
+    "#X_train['customerID'] = X_train['customerID'].map(lambda x: str(x)[:-6])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "SeniorCitizen         int64\n",
+       "Partner               int64\n",
+       "Dependents            int64\n",
+       "tenure                int64\n",
+       "PhoneService          int64\n",
+       "MultipleLines         int64\n",
+       "InternetService       int64\n",
+       "OnlineSecurity        int64\n",
+       "OnlineBackup          int64\n",
+       "DeviceProtection      int64\n",
+       "TechSupport           int64\n",
+       "StreamingTV           int64\n",
+       "StreamingMovies       int64\n",
+       "Contract              int64\n",
+       "PaperlessBilling      int64\n",
+       "PaymentMethod         int64\n",
+       "MonthlyCharges      float64\n",
+       "TotalCharges        float64\n",
+       "gender_cat             int8\n",
+       "dtype: object"
+      ]
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "X_train.dtypes"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "381     1\n",
+       "6586    0\n",
+       "4375    0\n",
+       "3240    1\n",
+       "1599    0\n",
+       "Name: Churn, dtype: int64"
+      ]
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_train.head(5)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/michelle/opt/anaconda3/envs/U4-S2-NN/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
+      "  warnings.warn(CV_WARNING, FutureWarning)\n",
+      "WARNING: Logging before flag parsing goes to stderr.\n",
+      "W0123 23:22:51.496829 140735661650816 deprecation.py:506] From /Users/michelle/opt/anaconda3/envs/U4-S2-NN/lib/python3.7/site-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
+      "Instructions for updating:\n",
+      "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
+      "W0123 23:22:51.578577 140735661650816 deprecation.py:323] From /Users/michelle/opt/anaconda3/envs/U4-S2-NN/lib/python3.7/site-packages/tensorflow/python/ops/nn_impl.py:180: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
+      "Instructions for updating:\n",
+      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Best: 0.7339312434196472 using {'batch_size': 10, 'epochs': 20}\n",
+      "Means: 0.7339312434196472, Stdev: 0.010042812275443822 with: {'batch_size': 10, 'epochs': 20}\n",
+      "Means: 0.7339312434196472, Stdev: 0.010042812275443822 with: {'batch_size': 20, 'epochs': 20}\n",
+      "Means: 0.7339312434196472, Stdev: 0.010042812275443822 with: {'batch_size': 40, 'epochs': 20}\n",
+      "Means: 0.7339312434196472, Stdev: 0.010042812275443822 with: {'batch_size': 60, 'epochs': 20}\n",
+      "Means: 0.7339312434196472, Stdev: 0.010042812275443822 with: {'batch_size': 80, 'epochs': 20}\n",
+      "Means: 0.7339312434196472, Stdev: 0.010042812275443822 with: {'batch_size': 100, 'epochs': 20}\n"
+     ]
+    }
+   ],
+   "source": [
+    "#baseline MLP model\n",
+    "\n",
+    "#imports\n",
+    "from sklearn.model_selection import GridSearchCV\n",
+    "from tensorflow.keras.models import Sequential\n",
+    "from tensorflow.keras.layers import Dense\n",
+    "from tensorflow.keras.wrappers.scikit_learn import KerasClassifier\n",
+    "\n",
+    "# Function to create model, required for KerasClassifier\n",
+    "def create_model():\n",
+    "    # create model\n",
+    "    model = Sequential()\n",
+    "    model.add(Dense(12, input_dim=19, activation='relu'))\n",
+    "    model.add(Dense(1, activation='sigmoid'))\n",
+    "    # Compile model\n",
+    "    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
+    "    return model\n",
+    "\n",
+    "# create model\n",
+    "model = KerasClassifier(build_fn=create_model, verbose=0)\n",
+    "\n",
+    "# define the grid search parameters\n",
+    "# batch_size = [10, 20, 40, 60, 80, 100]\n",
+    "# param_grid = dict(batch_size=batch_size, epochs=epochs)\n",
+    "\n",
+    "# define the grid search parameters\n",
+    "param_grid = {'batch_size': [10, 20, 40, 60, 80, 100],\n",
+    "              'epochs': [20]}\n",
+    "\n",
+    "# Create Grid Search\n",
+    "grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=1)\n",
+    "grid_result = grid.fit(X_train, y_train)\n",
+    "\n",
+    "# Report Results\n",
+    "print(f\"Best: {grid_result.best_score_} using {grid_result.best_params_}\")\n",
+    "means = grid_result.cv_results_['mean_test_score']\n",
+    "stds = grid_result.cv_results_['std_test_score']\n",
+    "params = grid_result.cv_results_['params']\n",
+    "for mean, stdev, param in zip(means, stds, params):\n",
+    "    print(f\"Means: {mean}, Stdev: {stdev} with: {param}\") \n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Best: 0.7346301119587866 using {'batch_size': 20, 'epochs': 20}\n",
+      "Means: 0.7346301119587866, Stdev: 0.004601206650408762 with: {'batch_size': 20, 'epochs': 20}\n",
+      "Means: 0.7346301119587866, Stdev: 0.004601206650408762 with: {'batch_size': 20, 'epochs': 40}\n",
+      "Means: 0.7346301119587866, Stdev: 0.004601206650408762 with: {'batch_size': 20, 'epochs': 60}\n",
+      "Means: 0.7346301119587866, Stdev: 0.004601206650408762 with: {'batch_size': 20, 'epochs': 200}\n"
+     ]
+    }
+   ],
+   "source": [
+    "#now do some epochs\n",
+    "\n",
+    "# define the grid search parameters\n",
+    "param_grid = {'batch_size': [20],\n",
+    "              'epochs': [20, 40, 60,200]}\n",
+    "\n",
+    "# Create Grid Search\n",
+    "grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=1)\n",
+    "grid_result = grid.fit(X, Y)\n",
+    "\n",
+    "# Report Results\n",
+    "print(f\"Best: {grid_result.best_score_} using {grid_result.best_params_}\")\n",
+    "means = grid_result.cv_results_['mean_test_score']\n",
+    "stds = grid_result.cv_results_['std_test_score']\n",
+    "params = grid_result.cv_results_['params']\n",
+    "for mean, stdev, param in zip(means, stds, params):\n",
+    "    print(f\"Means: {mean}, Stdev: {stdev} with: {param}\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Important Hyperparameters\n",
+    "X =  x_train\n",
+    "y =  y_train\n",
+    "\n",
+    "inputs = X.shape[1]\n",
+    "\n",
+    "def train():\n",
+    "    \n",
+    "    wandb.init(project=\"boston\", entity=\"lambda-ds7\") \n",
+    "    \n",
+    "    config = wandb.config\n",
+    "\n",
+    "    # Create Model\n",
+    "    model = Sequential()\n",
+    "    model.add(Dense(64, activation='relu', input_shape=(inputs,)))\n",
+    "    model.add(Dense(64, activation='relu'))\n",
+    "    model.add(Dense(64, activation='relu'))\n",
+    "    model.add(Dense(1))\n",
+    "\n",
+    "    # Optimizer \n",
+    "    adam = Adam(learning_rate=config.learning_rate)\n",
+    "\n",
+    "    # Compile Model\n",
+    "    model.compile(optimizer=adam, loss='mse', metrics=['mse', 'mae'])\n",
+    "\n",
+    "    # Fit Model\n",
+    "    model.fit(X, y, \n",
+    "              validation_split=0.33, \n",
+    "              epochs=config.epochs, \n",
+    "              batch_size=config.batch_size, \n",
+    "              callbacks=[WandbCallback()]\n",
+    "             )\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "markdown",
    "metadata": {
@@ -77,9 +917,9 @@
    "version": "0.3.2"
   },
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "U4-S2-NN(v1)",
    "language": "python",
-   "name": "python3"
+   "name": "u4-s2-nn"
   },
   "language_info": {
    "codemirror_mode": {
@@ -91,9 +931,9 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.3"
+   "version": "3.7.0"
   }
  },
  "nbformat": 4,
- "nbformat_minor": 2
+ "nbformat_minor": 4
 }
diff --git a/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb b/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
index 4bb18e9..fb16ed0 100644
--- a/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
+++ b/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
@@ -181,167 +181,177 @@
     "outputId": "b05e251e-508f-46e6-865b-f869ae2a5dc4"
    },
    "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "WARNING: Logging before flag parsing goes to stderr.\n",
+      "W0123 13:21:37.901751 140735661650816 deprecation.py:506] From /Users/michelle/opt/anaconda3/envs/U4-S2-NN/lib/python3.7/site-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
+      "Instructions for updating:\n",
+      "Call initializer instance with the dtype argument instead of passing it to the constructor\n"
+     ]
+    },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "Train on 404 samples, validate on 102 samples\n",
       "Epoch 1/75\n",
-      "404/404 [==============================] - 2s 4ms/sample - loss: 498.2045 - mse: 498.2046 - mae: 20.2543 - val_loss: 421.5039 - val_mse: 421.5038 - val_mae: 18.3349\n",
+      "404/404 [==============================] - 0s 570us/sample - loss: 490.0535 - mean_squared_error: 490.0534 - mean_absolute_error: 19.9554 - val_loss: 398.2172 - val_mean_squared_error: 398.2172 - val_mean_absolute_error: 17.6624\n",
       "Epoch 2/75\n",
-      "404/404 [==============================] - 0s 347us/sample - loss: 249.6985 - mse: 249.6985 - mae: 13.2672 - val_loss: 111.3743 - val_mse: 111.3743 - val_mae: 8.6210\n",
+      "404/404 [==============================] - 0s 186us/sample - loss: 231.3903 - mean_squared_error: 231.3903 - mean_absolute_error: 12.4744 - val_loss: 96.5147 - val_mean_squared_error: 96.5147 - val_mean_absolute_error: 8.4068\n",
       "Epoch 3/75\n",
-      "404/404 [==============================] - 0s 344us/sample - loss: 56.6755 - mse: 56.6755 - mae: 5.4817 - val_loss: 39.1997 - val_mse: 39.1997 - val_mae: 4.9872\n",
+      "404/404 [==============================] - 0s 196us/sample - loss: 56.3946 - mean_squared_error: 56.3946 - mean_absolute_error: 5.7052 - val_loss: 38.4174 - val_mean_squared_error: 38.4174 - val_mean_absolute_error: 4.7972\n",
       "Epoch 4/75\n",
-      "404/404 [==============================] - 0s 364us/sample - loss: 28.3243 - mse: 28.3243 - mae: 3.7054 - val_loss: 26.9866 - val_mse: 26.9866 - val_mae: 4.0796\n",
+      "404/404 [==============================] - 0s 194us/sample - loss: 30.7410 - mean_squared_error: 30.7410 - mean_absolute_error: 3.8747 - val_loss: 27.7420 - val_mean_squared_error: 27.7420 - val_mean_absolute_error: 4.1444\n",
       "Epoch 5/75\n",
-      "404/404 [==============================] - 0s 382us/sample - loss: 20.5281 - mse: 20.5281 - mae: 3.1209 - val_loss: 24.6172 - val_mse: 24.6172 - val_mae: 3.8052\n",
+      "404/404 [==============================] - 0s 195us/sample - loss: 23.0465 - mean_squared_error: 23.0465 - mean_absolute_error: 3.3851 - val_loss: 24.9074 - val_mean_squared_error: 24.9074 - val_mean_absolute_error: 3.8092\n",
       "Epoch 6/75\n",
-      "404/404 [==============================] - 0s 393us/sample - loss: 17.9283 - mse: 17.9283 - mae: 2.8665 - val_loss: 23.6524 - val_mse: 23.6524 - val_mae: 3.6746\n",
+      "404/404 [==============================] - 0s 210us/sample - loss: 19.9336 - mean_squared_error: 19.9336 - mean_absolute_error: 3.0919 - val_loss: 23.8066 - val_mean_squared_error: 23.8066 - val_mean_absolute_error: 3.6810\n",
       "Epoch 7/75\n",
-      "404/404 [==============================] - 0s 440us/sample - loss: 16.9179 - mse: 16.9179 - mae: 2.8781 - val_loss: 23.4620 - val_mse: 23.4620 - val_mae: 3.5778\n",
+      "404/404 [==============================] - 0s 179us/sample - loss: 17.8630 - mean_squared_error: 17.8630 - mean_absolute_error: 2.9267 - val_loss: 22.8162 - val_mean_squared_error: 22.8162 - val_mean_absolute_error: 3.5323\n",
       "Epoch 8/75\n",
-      "404/404 [==============================] - 0s 366us/sample - loss: 15.1579 - mse: 15.1579 - mae: 2.6440 - val_loss: 24.1374 - val_mse: 24.1374 - val_mae: 3.5929\n",
+      "404/404 [==============================] - 0s 203us/sample - loss: 16.4809 - mean_squared_error: 16.4809 - mean_absolute_error: 2.8166 - val_loss: 23.1527 - val_mean_squared_error: 23.1527 - val_mean_absolute_error: 3.5227\n",
       "Epoch 9/75\n",
-      "404/404 [==============================] - 0s 367us/sample - loss: 14.1717 - mse: 14.1717 - mae: 2.5937 - val_loss: 24.4829 - val_mse: 24.4829 - val_mae: 3.5639\n",
+      "404/404 [==============================] - 0s 209us/sample - loss: 15.0857 - mean_squared_error: 15.0857 - mean_absolute_error: 2.6937 - val_loss: 22.8469 - val_mean_squared_error: 22.8469 - val_mean_absolute_error: 3.4464\n",
       "Epoch 10/75\n",
-      "404/404 [==============================] - 0s 359us/sample - loss: 13.5002 - mse: 13.5002 - mae: 2.5633 - val_loss: 25.0170 - val_mse: 25.0170 - val_mae: 3.5601\n",
+      "404/404 [==============================] - 0s 195us/sample - loss: 14.1240 - mean_squared_error: 14.1240 - mean_absolute_error: 2.6220 - val_loss: 22.4766 - val_mean_squared_error: 22.4766 - val_mean_absolute_error: 3.3622\n",
       "Epoch 11/75\n",
-      "404/404 [==============================] - 0s 363us/sample - loss: 12.8641 - mse: 12.8641 - mae: 2.4963 - val_loss: 25.1162 - val_mse: 25.1162 - val_mae: 3.5449\n",
+      "404/404 [==============================] - 0s 205us/sample - loss: 13.1334 - mean_squared_error: 13.1334 - mean_absolute_error: 2.5923 - val_loss: 24.0398 - val_mean_squared_error: 24.0398 - val_mean_absolute_error: 3.3872\n",
       "Epoch 12/75\n",
-      "404/404 [==============================] - 0s 351us/sample - loss: 12.4033 - mse: 12.4033 - mae: 2.5224 - val_loss: 25.0382 - val_mse: 25.0382 - val_mae: 3.4858\n",
+      "404/404 [==============================] - 0s 213us/sample - loss: 12.4552 - mean_squared_error: 12.4552 - mean_absolute_error: 2.5030 - val_loss: 23.5113 - val_mean_squared_error: 23.5113 - val_mean_absolute_error: 3.3189\n",
       "Epoch 13/75\n",
-      "404/404 [==============================] - 0s 363us/sample - loss: 12.2653 - mse: 12.2653 - mae: 2.4637 - val_loss: 26.7274 - val_mse: 26.7274 - val_mae: 3.6054\n",
+      "404/404 [==============================] - 0s 253us/sample - loss: 11.8823 - mean_squared_error: 11.8823 - mean_absolute_error: 2.4651 - val_loss: 22.7493 - val_mean_squared_error: 22.7493 - val_mean_absolute_error: 3.2414\n",
       "Epoch 14/75\n",
-      "404/404 [==============================] - 0s 368us/sample - loss: 11.8249 - mse: 11.8249 - mae: 2.4648 - val_loss: 25.2347 - val_mse: 25.2347 - val_mae: 3.4602\n",
+      "404/404 [==============================] - 0s 263us/sample - loss: 11.3371 - mean_squared_error: 11.3371 - mean_absolute_error: 2.3845 - val_loss: 23.5278 - val_mean_squared_error: 23.5278 - val_mean_absolute_error: 3.2913\n",
       "Epoch 15/75\n",
-      "404/404 [==============================] - 0s 356us/sample - loss: 11.3965 - mse: 11.3965 - mae: 2.4134 - val_loss: 25.3070 - val_mse: 25.3070 - val_mae: 3.4305\n",
+      "404/404 [==============================] - 0s 186us/sample - loss: 11.1744 - mean_squared_error: 11.1745 - mean_absolute_error: 2.3500 - val_loss: 23.3536 - val_mean_squared_error: 23.3536 - val_mean_absolute_error: 3.2471\n",
       "Epoch 16/75\n",
-      "404/404 [==============================] - 0s 363us/sample - loss: 11.0982 - mse: 11.0982 - mae: 2.3616 - val_loss: 25.0599 - val_mse: 25.0599 - val_mae: 3.3784\n",
+      "404/404 [==============================] - 0s 186us/sample - loss: 10.7434 - mean_squared_error: 10.7434 - mean_absolute_error: 2.3423 - val_loss: 23.0399 - val_mean_squared_error: 23.0399 - val_mean_absolute_error: 3.1856\n",
       "Epoch 17/75\n",
-      "404/404 [==============================] - 0s 365us/sample - loss: 11.1969 - mse: 11.1969 - mae: 2.3806 - val_loss: 25.1976 - val_mse: 25.1976 - val_mae: 3.3732\n",
+      "404/404 [==============================] - 0s 185us/sample - loss: 10.3896 - mean_squared_error: 10.3896 - mean_absolute_error: 2.2834 - val_loss: 23.3320 - val_mean_squared_error: 23.3321 - val_mean_absolute_error: 3.2025\n",
       "Epoch 18/75\n",
-      "404/404 [==============================] - 0s 369us/sample - loss: 10.9278 - mse: 10.9278 - mae: 2.3653 - val_loss: 24.2875 - val_mse: 24.2875 - val_mae: 3.3114\n",
+      "404/404 [==============================] - 0s 198us/sample - loss: 10.1182 - mean_squared_error: 10.1182 - mean_absolute_error: 2.2520 - val_loss: 24.0393 - val_mean_squared_error: 24.0393 - val_mean_absolute_error: 3.2137\n",
       "Epoch 19/75\n",
-      "404/404 [==============================] - 0s 365us/sample - loss: 10.5854 - mse: 10.5854 - mae: 2.3170 - val_loss: 26.1450 - val_mse: 26.1450 - val_mae: 3.3971\n",
+      "404/404 [==============================] - 0s 193us/sample - loss: 10.0506 - mean_squared_error: 10.0506 - mean_absolute_error: 2.2791 - val_loss: 23.2859 - val_mean_squared_error: 23.2859 - val_mean_absolute_error: 3.1392\n",
       "Epoch 20/75\n",
-      "404/404 [==============================] - 0s 401us/sample - loss: 10.2546 - mse: 10.2546 - mae: 2.2813 - val_loss: 26.5278 - val_mse: 26.5278 - val_mae: 3.4465\n",
+      "404/404 [==============================] - 0s 198us/sample - loss: 9.7836 - mean_squared_error: 9.7836 - mean_absolute_error: 2.2294 - val_loss: 22.6931 - val_mean_squared_error: 22.6931 - val_mean_absolute_error: 3.1000\n",
       "Epoch 21/75\n",
-      "404/404 [==============================] - 0s 380us/sample - loss: 10.1321 - mse: 10.1321 - mae: 2.2866 - val_loss: 24.0363 - val_mse: 24.0363 - val_mae: 3.2792\n",
+      "404/404 [==============================] - 0s 185us/sample - loss: 9.6723 - mean_squared_error: 9.6723 - mean_absolute_error: 2.2123 - val_loss: 24.7043 - val_mean_squared_error: 24.7043 - val_mean_absolute_error: 3.1983\n",
       "Epoch 22/75\n",
-      "404/404 [==============================] - 0s 421us/sample - loss: 9.9169 - mse: 9.9169 - mae: 2.2907 - val_loss: 23.7310 - val_mse: 23.7310 - val_mae: 3.2334\n",
+      "404/404 [==============================] - 0s 184us/sample - loss: 9.5074 - mean_squared_error: 9.5074 - mean_absolute_error: 2.2456 - val_loss: 22.0184 - val_mean_squared_error: 22.0184 - val_mean_absolute_error: 3.0300\n",
       "Epoch 23/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 9.6588 - mse: 9.6588 - mae: 2.2284 - val_loss: 23.6472 - val_mse: 23.6472 - val_mae: 3.2013\n",
+      "404/404 [==============================] - 0s 246us/sample - loss: 9.2598 - mean_squared_error: 9.2598 - mean_absolute_error: 2.1732 - val_loss: 24.7915 - val_mean_squared_error: 24.7915 - val_mean_absolute_error: 3.1873\n",
       "Epoch 24/75\n",
-      "404/404 [==============================] - 0s 363us/sample - loss: 9.6887 - mse: 9.6887 - mae: 2.2468 - val_loss: 23.5379 - val_mse: 23.5379 - val_mae: 3.1921\n",
+      "404/404 [==============================] - 0s 235us/sample - loss: 9.2741 - mean_squared_error: 9.2741 - mean_absolute_error: 2.1899 - val_loss: 23.2416 - val_mean_squared_error: 23.2417 - val_mean_absolute_error: 3.0956\n",
       "Epoch 25/75\n",
-      "404/404 [==============================] - 0s 373us/sample - loss: 9.4049 - mse: 9.4049 - mae: 2.1999 - val_loss: 23.7713 - val_mse: 23.7713 - val_mae: 3.2273\n",
+      "404/404 [==============================] - 0s 254us/sample - loss: 9.1700 - mean_squared_error: 9.1700 - mean_absolute_error: 2.1464 - val_loss: 22.2480 - val_mean_squared_error: 22.2480 - val_mean_absolute_error: 3.0105\n",
       "Epoch 26/75\n",
-      "404/404 [==============================] - 0s 359us/sample - loss: 9.2304 - mse: 9.2304 - mae: 2.1946 - val_loss: 23.5093 - val_mse: 23.5093 - val_mae: 3.2072\n",
+      "404/404 [==============================] - 0s 251us/sample - loss: 8.9560 - mean_squared_error: 8.9560 - mean_absolute_error: 2.1303 - val_loss: 22.3859 - val_mean_squared_error: 22.3859 - val_mean_absolute_error: 3.0088\n",
       "Epoch 27/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 9.0493 - mse: 9.0493 - mae: 2.1528 - val_loss: 23.7969 - val_mse: 23.7969 - val_mae: 3.2005\n",
+      "404/404 [==============================] - 0s 244us/sample - loss: 9.0510 - mean_squared_error: 9.0510 - mean_absolute_error: 2.1400 - val_loss: 23.0104 - val_mean_squared_error: 23.0104 - val_mean_absolute_error: 3.0414\n",
       "Epoch 28/75\n",
-      "404/404 [==============================] - 0s 359us/sample - loss: 8.9363 - mse: 8.9363 - mae: 2.1475 - val_loss: 22.1030 - val_mse: 22.1030 - val_mae: 3.0707\n",
+      "404/404 [==============================] - 0s 248us/sample - loss: 8.8895 - mean_squared_error: 8.8895 - mean_absolute_error: 2.1245 - val_loss: 20.9260 - val_mean_squared_error: 20.9260 - val_mean_absolute_error: 2.9106\n",
       "Epoch 29/75\n",
-      "404/404 [==============================] - 0s 373us/sample - loss: 8.7834 - mse: 8.7834 - mae: 2.1231 - val_loss: 22.5153 - val_mse: 22.5153 - val_mae: 3.1532\n",
+      "404/404 [==============================] - 0s 243us/sample - loss: 8.7419 - mean_squared_error: 8.7419 - mean_absolute_error: 2.1137 - val_loss: 21.8809 - val_mean_squared_error: 21.8809 - val_mean_absolute_error: 2.9406\n",
       "Epoch 30/75\n",
-      "404/404 [==============================] - 0s 371us/sample - loss: 8.7925 - mse: 8.7925 - mae: 2.1531 - val_loss: 22.0449 - val_mse: 22.0449 - val_mae: 3.1245\n",
+      "404/404 [==============================] - 0s 248us/sample - loss: 8.6192 - mean_squared_error: 8.6192 - mean_absolute_error: 2.0792 - val_loss: 22.9090 - val_mean_squared_error: 22.9090 - val_mean_absolute_error: 3.0306\n",
       "Epoch 31/75\n",
-      "404/404 [==============================] - 0s 374us/sample - loss: 9.1879 - mse: 9.1879 - mae: 2.2029 - val_loss: 22.1780 - val_mse: 22.1780 - val_mae: 3.0623\n",
+      "404/404 [==============================] - 0s 268us/sample - loss: 8.5305 - mean_squared_error: 8.5305 - mean_absolute_error: 2.0813 - val_loss: 23.1560 - val_mean_squared_error: 23.1560 - val_mean_absolute_error: 3.0183\n",
       "Epoch 32/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 8.7136 - mse: 8.7136 - mae: 2.1164 - val_loss: 21.9815 - val_mse: 21.9815 - val_mae: 3.0969\n",
+      "404/404 [==============================] - 0s 252us/sample - loss: 8.5104 - mean_squared_error: 8.5104 - mean_absolute_error: 2.0651 - val_loss: 22.1836 - val_mean_squared_error: 22.1836 - val_mean_absolute_error: 2.9317\n",
       "Epoch 33/75\n",
-      "404/404 [==============================] - 0s 371us/sample - loss: 8.3018 - mse: 8.3018 - mae: 2.0639 - val_loss: 21.0477 - val_mse: 21.0477 - val_mae: 2.9645\n",
+      "404/404 [==============================] - 0s 252us/sample - loss: 8.3891 - mean_squared_error: 8.3891 - mean_absolute_error: 2.0553 - val_loss: 22.6649 - val_mean_squared_error: 22.6649 - val_mean_absolute_error: 2.9803\n",
       "Epoch 34/75\n",
-      "404/404 [==============================] - 0s 362us/sample - loss: 8.4156 - mse: 8.4156 - mae: 2.0970 - val_loss: 22.6659 - val_mse: 22.6659 - val_mae: 3.1235\n",
+      "404/404 [==============================] - 0s 259us/sample - loss: 8.3322 - mean_squared_error: 8.3322 - mean_absolute_error: 2.0653 - val_loss: 22.3670 - val_mean_squared_error: 22.3670 - val_mean_absolute_error: 2.9431\n",
       "Epoch 35/75\n",
-      "404/404 [==============================] - 0s 350us/sample - loss: 8.2938 - mse: 8.2938 - mae: 2.0567 - val_loss: 20.9574 - val_mse: 20.9574 - val_mae: 2.9746\n",
+      "404/404 [==============================] - 0s 244us/sample - loss: 8.3062 - mean_squared_error: 8.3062 - mean_absolute_error: 2.0195 - val_loss: 21.3575 - val_mean_squared_error: 21.3575 - val_mean_absolute_error: 2.9482\n",
       "Epoch 36/75\n",
-      "404/404 [==============================] - 0s 357us/sample - loss: 8.0515 - mse: 8.0515 - mae: 2.0591 - val_loss: 23.2063 - val_mse: 23.2063 - val_mae: 3.1980\n",
+      "404/404 [==============================] - 0s 239us/sample - loss: 7.9952 - mean_squared_error: 7.9952 - mean_absolute_error: 2.0031 - val_loss: 21.6819 - val_mean_squared_error: 21.6819 - val_mean_absolute_error: 2.9145\n",
       "Epoch 37/75\n",
-      "404/404 [==============================] - 0s 381us/sample - loss: 8.1403 - mse: 8.1403 - mae: 2.0584 - val_loss: 24.5238 - val_mse: 24.5237 - val_mae: 3.3531\n",
+      "404/404 [==============================] - 0s 231us/sample - loss: 8.0936 - mean_squared_error: 8.0936 - mean_absolute_error: 2.0235 - val_loss: 23.3477 - val_mean_squared_error: 23.3477 - val_mean_absolute_error: 3.0650\n",
       "Epoch 38/75\n",
-      "404/404 [==============================] - 0s 356us/sample - loss: 8.0043 - mse: 8.0043 - mae: 2.0776 - val_loss: 22.5424 - val_mse: 22.5424 - val_mae: 3.1494\n",
+      "404/404 [==============================] - 0s 219us/sample - loss: 8.2347 - mean_squared_error: 8.2347 - mean_absolute_error: 2.0499 - val_loss: 22.4942 - val_mean_squared_error: 22.4942 - val_mean_absolute_error: 2.9547\n",
       "Epoch 39/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 8.1182 - mse: 8.1182 - mae: 2.0683 - val_loss: 19.7576 - val_mse: 19.7576 - val_mae: 2.8799\n",
+      "404/404 [==============================] - 0s 229us/sample - loss: 7.7362 - mean_squared_error: 7.7362 - mean_absolute_error: 1.9941 - val_loss: 20.5049 - val_mean_squared_error: 20.5049 - val_mean_absolute_error: 2.8022\n",
       "Epoch 40/75\n",
-      "404/404 [==============================] - 0s 374us/sample - loss: 7.8578 - mse: 7.8578 - mae: 2.0131 - val_loss: 20.7728 - val_mse: 20.7728 - val_mae: 2.9499\n",
+      "404/404 [==============================] - 0s 210us/sample - loss: 7.6534 - mean_squared_error: 7.6534 - mean_absolute_error: 1.9601 - val_loss: 21.6292 - val_mean_squared_error: 21.6292 - val_mean_absolute_error: 2.9418\n",
       "Epoch 41/75\n",
-      "404/404 [==============================] - 0s 382us/sample - loss: 7.5711 - mse: 7.5711 - mae: 1.9896 - val_loss: 20.6170 - val_mse: 20.6170 - val_mae: 2.9936\n",
+      "404/404 [==============================] - 0s 186us/sample - loss: 7.6335 - mean_squared_error: 7.6335 - mean_absolute_error: 1.9727 - val_loss: 20.1330 - val_mean_squared_error: 20.1330 - val_mean_absolute_error: 2.7711\n",
       "Epoch 42/75\n",
-      "404/404 [==============================] - 0s 385us/sample - loss: 7.5822 - mse: 7.5822 - mae: 1.9683 - val_loss: 20.8541 - val_mse: 20.8541 - val_mae: 3.0054\n",
+      "404/404 [==============================] - 0s 278us/sample - loss: 7.6324 - mean_squared_error: 7.6324 - mean_absolute_error: 1.9780 - val_loss: 21.0962 - val_mean_squared_error: 21.0962 - val_mean_absolute_error: 2.9365\n",
       "Epoch 43/75\n",
-      "404/404 [==============================] - 0s 408us/sample - loss: 7.4533 - mse: 7.4533 - mae: 1.9645 - val_loss: 20.4473 - val_mse: 20.4473 - val_mae: 2.8861\n",
+      "404/404 [==============================] - 0s 239us/sample - loss: 7.5170 - mean_squared_error: 7.5170 - mean_absolute_error: 1.9378 - val_loss: 20.7448 - val_mean_squared_error: 20.7448 - val_mean_absolute_error: 2.7890\n",
       "Epoch 44/75\n",
-      "404/404 [==============================] - 0s 396us/sample - loss: 7.5226 - mse: 7.5226 - mae: 1.9509 - val_loss: 20.5193 - val_mse: 20.5193 - val_mae: 2.9619\n",
+      "404/404 [==============================] - 0s 211us/sample - loss: 7.3702 - mean_squared_error: 7.3702 - mean_absolute_error: 1.9479 - val_loss: 20.7637 - val_mean_squared_error: 20.7637 - val_mean_absolute_error: 2.7843\n",
       "Epoch 45/75\n",
-      "404/404 [==============================] - 0s 355us/sample - loss: 7.2819 - mse: 7.2819 - mae: 1.9350 - val_loss: 21.4862 - val_mse: 21.4862 - val_mae: 2.9908\n",
+      "404/404 [==============================] - 0s 191us/sample - loss: 7.5085 - mean_squared_error: 7.5085 - mean_absolute_error: 1.9165 - val_loss: 22.0807 - val_mean_squared_error: 22.0807 - val_mean_absolute_error: 2.9055\n",
       "Epoch 46/75\n",
-      "404/404 [==============================] - 0s 354us/sample - loss: 7.0130 - mse: 7.0130 - mae: 1.9152 - val_loss: 20.1577 - val_mse: 20.1577 - val_mae: 2.9370\n",
+      "404/404 [==============================] - 0s 229us/sample - loss: 7.4440 - mean_squared_error: 7.4440 - mean_absolute_error: 1.9480 - val_loss: 19.9362 - val_mean_squared_error: 19.9362 - val_mean_absolute_error: 2.7704\n",
       "Epoch 47/75\n",
-      "404/404 [==============================] - 0s 375us/sample - loss: 6.9431 - mse: 6.9431 - mae: 1.8819 - val_loss: 21.1210 - val_mse: 21.1210 - val_mae: 2.9746\n",
+      "404/404 [==============================] - 0s 228us/sample - loss: 7.0814 - mean_squared_error: 7.0814 - mean_absolute_error: 1.9241 - val_loss: 21.7144 - val_mean_squared_error: 21.7144 - val_mean_absolute_error: 2.9167\n",
       "Epoch 48/75\n",
-      "404/404 [==============================] - 0s 371us/sample - loss: 6.8982 - mse: 6.8982 - mae: 1.9037 - val_loss: 19.2999 - val_mse: 19.2999 - val_mae: 2.8638\n",
+      "404/404 [==============================] - 0s 215us/sample - loss: 7.2580 - mean_squared_error: 7.2580 - mean_absolute_error: 1.9181 - val_loss: 20.7423 - val_mean_squared_error: 20.7423 - val_mean_absolute_error: 2.8008\n",
       "Epoch 49/75\n",
-      "404/404 [==============================] - 0s 368us/sample - loss: 6.9521 - mse: 6.9521 - mae: 1.8862 - val_loss: 20.7825 - val_mse: 20.7825 - val_mae: 2.9369\n",
+      "404/404 [==============================] - 0s 248us/sample - loss: 7.1840 - mean_squared_error: 7.1840 - mean_absolute_error: 1.9217 - val_loss: 19.7995 - val_mean_squared_error: 19.7995 - val_mean_absolute_error: 2.7080\n",
       "Epoch 50/75\n",
-      "404/404 [==============================] - 0s 356us/sample - loss: 6.8718 - mse: 6.8718 - mae: 1.8889 - val_loss: 20.0288 - val_mse: 20.0288 - val_mae: 2.8915\n",
+      "404/404 [==============================] - 0s 229us/sample - loss: 6.8955 - mean_squared_error: 6.8955 - mean_absolute_error: 1.8626 - val_loss: 19.8117 - val_mean_squared_error: 19.8117 - val_mean_absolute_error: 2.7436\n",
       "Epoch 51/75\n",
-      "404/404 [==============================] - 0s 354us/sample - loss: 6.7111 - mse: 6.7111 - mae: 1.8702 - val_loss: 20.4913 - val_mse: 20.4913 - val_mae: 3.0116\n",
+      "404/404 [==============================] - 0s 170us/sample - loss: 6.9405 - mean_squared_error: 6.9405 - mean_absolute_error: 1.8890 - val_loss: 19.8604 - val_mean_squared_error: 19.8604 - val_mean_absolute_error: 2.7482\n",
       "Epoch 52/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 6.7492 - mse: 6.7492 - mae: 1.8482 - val_loss: 18.3008 - val_mse: 18.3008 - val_mae: 2.7362\n",
+      "404/404 [==============================] - 0s 169us/sample - loss: 6.7608 - mean_squared_error: 6.7608 - mean_absolute_error: 1.8747 - val_loss: 19.4019 - val_mean_squared_error: 19.4019 - val_mean_absolute_error: 2.7792\n",
       "Epoch 53/75\n",
-      "404/404 [==============================] - 0s 356us/sample - loss: 6.6262 - mse: 6.6262 - mae: 1.8395 - val_loss: 18.1885 - val_mse: 18.1885 - val_mae: 2.6920\n",
+      "404/404 [==============================] - 0s 169us/sample - loss: 7.0518 - mean_squared_error: 7.0518 - mean_absolute_error: 1.8823 - val_loss: 19.6023 - val_mean_squared_error: 19.6023 - val_mean_absolute_error: 2.7112\n",
       "Epoch 54/75\n",
-      "404/404 [==============================] - 0s 369us/sample - loss: 6.7148 - mse: 6.7148 - mae: 1.8611 - val_loss: 18.5764 - val_mse: 18.5764 - val_mae: 2.6977\n",
+      "404/404 [==============================] - 0s 181us/sample - loss: 6.8871 - mean_squared_error: 6.8871 - mean_absolute_error: 1.8867 - val_loss: 19.7417 - val_mean_squared_error: 19.7417 - val_mean_absolute_error: 2.7615\n",
       "Epoch 55/75\n",
-      "404/404 [==============================] - 0s 358us/sample - loss: 6.5425 - mse: 6.5425 - mae: 1.8522 - val_loss: 19.5772 - val_mse: 19.5772 - val_mae: 2.8326\n",
+      "404/404 [==============================] - 0s 197us/sample - loss: 6.6763 - mean_squared_error: 6.6763 - mean_absolute_error: 1.8381 - val_loss: 19.1521 - val_mean_squared_error: 19.1521 - val_mean_absolute_error: 2.6943\n",
       "Epoch 56/75\n",
-      "404/404 [==============================] - 0s 423us/sample - loss: 6.3349 - mse: 6.3349 - mae: 1.8175 - val_loss: 19.0932 - val_mse: 19.0932 - val_mae: 2.8260\n",
+      "404/404 [==============================] - 0s 254us/sample - loss: 6.4884 - mean_squared_error: 6.4884 - mean_absolute_error: 1.8144 - val_loss: 19.3553 - val_mean_squared_error: 19.3553 - val_mean_absolute_error: 2.7389\n",
       "Epoch 57/75\n",
-      "404/404 [==============================] - 0s 375us/sample - loss: 6.4253 - mse: 6.4253 - mae: 1.7972 - val_loss: 20.4036 - val_mse: 20.4036 - val_mae: 2.9258\n",
+      "404/404 [==============================] - 0s 233us/sample - loss: 6.5331 - mean_squared_error: 6.5331 - mean_absolute_error: 1.8399 - val_loss: 20.9405 - val_mean_squared_error: 20.9405 - val_mean_absolute_error: 2.8646\n",
       "Epoch 58/75\n",
-      "404/404 [==============================] - 0s 362us/sample - loss: 6.2897 - mse: 6.2897 - mae: 1.7785 - val_loss: 21.2845 - val_mse: 21.2845 - val_mae: 3.0715\n",
+      "404/404 [==============================] - 0s 184us/sample - loss: 6.7342 - mean_squared_error: 6.7342 - mean_absolute_error: 1.8331 - val_loss: 22.9911 - val_mean_squared_error: 22.9911 - val_mean_absolute_error: 3.0028\n",
       "Epoch 59/75\n",
-      "404/404 [==============================] - 0s 378us/sample - loss: 6.7839 - mse: 6.7839 - mae: 1.9027 - val_loss: 18.6853 - val_mse: 18.6853 - val_mae: 2.7709\n",
+      "404/404 [==============================] - 0s 178us/sample - loss: 6.5701 - mean_squared_error: 6.5701 - mean_absolute_error: 1.8455 - val_loss: 19.3855 - val_mean_squared_error: 19.3855 - val_mean_absolute_error: 2.7379\n",
       "Epoch 60/75\n",
-      "404/404 [==============================] - 0s 395us/sample - loss: 6.7178 - mse: 6.7178 - mae: 1.8871 - val_loss: 19.5394 - val_mse: 19.5394 - val_mae: 2.8101\n",
+      "404/404 [==============================] - 0s 180us/sample - loss: 6.3719 - mean_squared_error: 6.3719 - mean_absolute_error: 1.8011 - val_loss: 19.5990 - val_mean_squared_error: 19.5990 - val_mean_absolute_error: 2.7122\n",
       "Epoch 61/75\n",
-      "404/404 [==============================] - 0s 366us/sample - loss: 6.4152 - mse: 6.4152 - mae: 1.8175 - val_loss: 18.2377 - val_mse: 18.2377 - val_mae: 2.7450\n",
+      "404/404 [==============================] - 0s 174us/sample - loss: 6.2851 - mean_squared_error: 6.2851 - mean_absolute_error: 1.7751 - val_loss: 19.3022 - val_mean_squared_error: 19.3022 - val_mean_absolute_error: 2.7185\n",
       "Epoch 62/75\n",
-      "404/404 [==============================] - 0s 384us/sample - loss: 5.9727 - mse: 5.9727 - mae: 1.7630 - val_loss: 19.0252 - val_mse: 19.0252 - val_mae: 2.7960\n",
+      "404/404 [==============================] - 0s 182us/sample - loss: 6.2671 - mean_squared_error: 6.2671 - mean_absolute_error: 1.7716 - val_loss: 18.8282 - val_mean_squared_error: 18.8282 - val_mean_absolute_error: 2.6600\n",
       "Epoch 63/75\n",
-      "404/404 [==============================] - 0s 380us/sample - loss: 6.0973 - mse: 6.0973 - mae: 1.8071 - val_loss: 18.8069 - val_mse: 18.8069 - val_mae: 2.8894\n",
+      "404/404 [==============================] - 0s 231us/sample - loss: 6.2348 - mean_squared_error: 6.2348 - mean_absolute_error: 1.7589 - val_loss: 18.7529 - val_mean_squared_error: 18.7529 - val_mean_absolute_error: 2.6739\n",
       "Epoch 64/75\n",
-      "404/404 [==============================] - 0s 362us/sample - loss: 6.1074 - mse: 6.1074 - mae: 1.7978 - val_loss: 18.4702 - val_mse: 18.4702 - val_mae: 2.7851\n",
+      "404/404 [==============================] - 0s 243us/sample - loss: 6.0216 - mean_squared_error: 6.0216 - mean_absolute_error: 1.7389 - val_loss: 20.2712 - val_mean_squared_error: 20.2712 - val_mean_absolute_error: 2.8330\n",
       "Epoch 65/75\n",
-      "404/404 [==============================] - 0s 369us/sample - loss: 5.9329 - mse: 5.9329 - mae: 1.7545 - val_loss: 18.5321 - val_mse: 18.5321 - val_mae: 2.7933\n",
+      "404/404 [==============================] - 0s 228us/sample - loss: 6.0252 - mean_squared_error: 6.0252 - mean_absolute_error: 1.7693 - val_loss: 19.1335 - val_mean_squared_error: 19.1335 - val_mean_absolute_error: 2.6905\n",
       "Epoch 66/75\n",
-      "404/404 [==============================] - 0s 341us/sample - loss: 5.7473 - mse: 5.7473 - mae: 1.7211 - val_loss: 18.5536 - val_mse: 18.5536 - val_mae: 2.8010\n",
+      "404/404 [==============================] - 0s 203us/sample - loss: 5.9634 - mean_squared_error: 5.9634 - mean_absolute_error: 1.7527 - val_loss: 18.7009 - val_mean_squared_error: 18.7009 - val_mean_absolute_error: 2.6708\n",
       "Epoch 67/75\n",
-      "404/404 [==============================] - 0s 339us/sample - loss: 5.8866 - mse: 5.8866 - mae: 1.7224 - val_loss: 18.0067 - val_mse: 18.0067 - val_mae: 2.7054\n",
+      "404/404 [==============================] - 0s 168us/sample - loss: 5.8888 - mean_squared_error: 5.8888 - mean_absolute_error: 1.7126 - val_loss: 20.0326 - val_mean_squared_error: 20.0326 - val_mean_absolute_error: 2.7814\n",
       "Epoch 68/75\n",
-      "404/404 [==============================] - 0s 337us/sample - loss: 5.7885 - mse: 5.7885 - mae: 1.7391 - val_loss: 17.5502 - val_mse: 17.5502 - val_mae: 2.6767\n",
+      "404/404 [==============================] - 0s 181us/sample - loss: 6.1340 - mean_squared_error: 6.1340 - mean_absolute_error: 1.7931 - val_loss: 20.1440 - val_mean_squared_error: 20.1440 - val_mean_absolute_error: 2.8244\n",
       "Epoch 69/75\n",
-      "404/404 [==============================] - 0s 331us/sample - loss: 5.8809 - mse: 5.8809 - mae: 1.7542 - val_loss: 17.0280 - val_mse: 17.0280 - val_mae: 2.6404\n",
+      "404/404 [==============================] - 0s 246us/sample - loss: 5.7028 - mean_squared_error: 5.7028 - mean_absolute_error: 1.7089 - val_loss: 18.3577 - val_mean_squared_error: 18.3577 - val_mean_absolute_error: 2.6282\n",
       "Epoch 70/75\n",
-      "404/404 [==============================] - 0s 343us/sample - loss: 5.6028 - mse: 5.6028 - mae: 1.6972 - val_loss: 17.7188 - val_mse: 17.7188 - val_mae: 2.6979\n",
+      "404/404 [==============================] - 0s 245us/sample - loss: 6.1347 - mean_squared_error: 6.1347 - mean_absolute_error: 1.8078 - val_loss: 17.7270 - val_mean_squared_error: 17.7270 - val_mean_absolute_error: 2.5809\n",
       "Epoch 71/75\n",
-      "404/404 [==============================] - 0s 337us/sample - loss: 5.4361 - mse: 5.4361 - mae: 1.6741 - val_loss: 16.8852 - val_mse: 16.8852 - val_mae: 2.6126\n",
+      "404/404 [==============================] - 0s 184us/sample - loss: 6.0204 - mean_squared_error: 6.0204 - mean_absolute_error: 1.7457 - val_loss: 18.6790 - val_mean_squared_error: 18.6791 - val_mean_absolute_error: 2.6941\n",
       "Epoch 72/75\n",
-      "404/404 [==============================] - 0s 345us/sample - loss: 5.5608 - mse: 5.5608 - mae: 1.7252 - val_loss: 16.7483 - val_mse: 16.7483 - val_mae: 2.6063\n",
+      "404/404 [==============================] - 0s 197us/sample - loss: 5.9489 - mean_squared_error: 5.9489 - mean_absolute_error: 1.7572 - val_loss: 18.5150 - val_mean_squared_error: 18.5150 - val_mean_absolute_error: 2.6796\n",
       "Epoch 73/75\n",
-      "404/404 [==============================] - 0s 341us/sample - loss: 5.5022 - mse: 5.5022 - mae: 1.6912 - val_loss: 17.6786 - val_mse: 17.6786 - val_mae: 2.7316\n",
+      "404/404 [==============================] - 0s 174us/sample - loss: 5.8439 - mean_squared_error: 5.8439 - mean_absolute_error: 1.6876 - val_loss: 17.2892 - val_mean_squared_error: 17.2892 - val_mean_absolute_error: 2.5484\n",
       "Epoch 74/75\n",
-      "404/404 [==============================] - 0s 396us/sample - loss: 5.2794 - mse: 5.2794 - mae: 1.6478 - val_loss: 17.6115 - val_mse: 17.6115 - val_mae: 2.6773\n",
+      "404/404 [==============================] - 0s 175us/sample - loss: 5.8720 - mean_squared_error: 5.8720 - mean_absolute_error: 1.7562 - val_loss: 18.5007 - val_mean_squared_error: 18.5007 - val_mean_absolute_error: 2.6799\n",
       "Epoch 75/75\n",
-      "404/404 [==============================] - 0s 338us/sample - loss: 5.4796 - mse: 5.4796 - mae: 1.6876 - val_loss: 17.2835 - val_mse: 17.2835 - val_mae: 2.7126\n"
+      "404/404 [==============================] - 0s 192us/sample - loss: 5.6373 - mean_squared_error: 5.6373 - mean_absolute_error: 1.7257 - val_loss: 17.4923 - val_mean_squared_error: 17.4923 - val_mean_absolute_error: 2.6214\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "<tensorflow.python.keras.callbacks.History at 0x7f36340c6b38>"
+       "<tensorflow.python.keras.callbacks.History at 0x128f7a898>"
       ]
      },
      "execution_count": 3,
@@ -449,7 +459,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 14,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -464,7 +474,7 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
+      "/Users/michelle/opt/anaconda3/envs/U4-S2-NN/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
       "  warnings.warn(CV_WARNING, FutureWarning)\n"
      ]
     },
@@ -472,13 +482,13 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Best: 0.65234375 using {'batch_size': 10, 'epochs': 20}\n",
-      "Means: 0.65234375, Stdev: 0.033298728782667764 with: {'batch_size': 10, 'epochs': 20}\n",
-      "Means: 0.6263020833333334, Stdev: 0.01813592223591682 with: {'batch_size': 20, 'epochs': 20}\n",
-      "Means: 0.6041666666666666, Stdev: 0.037782859709757574 with: {'batch_size': 40, 'epochs': 20}\n",
-      "Means: 0.5533854166666666, Stdev: 0.03210632293213009 with: {'batch_size': 60, 'epochs': 20}\n",
-      "Means: 0.61328125, Stdev: 0.024079742199097563 with: {'batch_size': 80, 'epochs': 20}\n",
-      "Means: 0.5611979166666666, Stdev: 0.038450060052691144 with: {'batch_size': 100, 'epochs': 20}\n"
+      "Best: 0.6432291666666666 using {'batch_size': 10, 'epochs': 20}\n",
+      "Means: 0.6432291666666666, Stdev: 0.026748227323143407 with: {'batch_size': 10, 'epochs': 20}\n",
+      "Means: 0.5390625, Stdev: 0.10040405025342188 with: {'batch_size': 20, 'epochs': 20}\n",
+      "Means: 0.609375, Stdev: 0.034499065884093155 with: {'batch_size': 40, 'epochs': 20}\n",
+      "Means: 0.5104166666666666, Stdev: 0.047983140033042396 with: {'batch_size': 60, 'epochs': 20}\n",
+      "Means: 0.5794270833333334, Stdev: 0.02171006770902743 with: {'batch_size': 80, 'epochs': 20}\n",
+      "Means: 0.5598958333333334, Stdev: 0.08108540352573054 with: {'batch_size': 100, 'epochs': 20}\n"
      ]
     }
    ],
@@ -566,11 +576,11 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Best: 0.7044270833333334 using {'batch_size': 20, 'epochs': 200}\n",
-      "Means: 0.6666666666666666, Stdev: 0.028940248399600087 with: {'batch_size': 20, 'epochs': 20}\n",
-      "Means: 0.6588541666666666, Stdev: 0.028940248399600087 with: {'batch_size': 20, 'epochs': 40}\n",
-      "Means: 0.6848958333333334, Stdev: 0.03498705427745938 with: {'batch_size': 20, 'epochs': 60}\n",
-      "Means: 0.7044270833333334, Stdev: 0.018414239093399672 with: {'batch_size': 20, 'epochs': 200}\n"
+      "Best: 0.71875 using {'batch_size': 20, 'epochs': 200}\n",
+      "Means: 0.59765625, Stdev: 0.04314594147338774 with: {'batch_size': 20, 'epochs': 20}\n",
+      "Means: 0.6471354166666666, Stdev: 0.017566064535458385 with: {'batch_size': 20, 'epochs': 40}\n",
+      "Means: 0.6796875, Stdev: 0.03314563036811941 with: {'batch_size': 20, 'epochs': 60}\n",
+      "Means: 0.71875, Stdev: 0.005524271728019903 with: {'batch_size': 20, 'epochs': 200}\n"
      ]
     }
    ],
@@ -730,7 +740,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [
     {
@@ -738,8 +748,8 @@
       "text/html": [
        "\n",
        "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/lambda-ds7/boston\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/lambda-ds7/boston/runs/whw09rro\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston/runs/whw09rro</a><br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/ds8/ds9-boston\" target=\"_blank\">https://app.wandb.ai/ds8/ds9-boston</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/ds8/ds9-boston/runs/jnig53cv\" target=\"_blank\">https://app.wandb.ai/ds8/ds9-boston/runs/jnig53cv</a><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -749,25 +759,33 @@
      "metadata": {},
      "output_type": "display_data"
     },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "E0123 14:07:45.393954 140735661650816 jupyter.py:96] Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+     ]
+    },
     {
      "data": {
       "text/plain": [
-       "W&B Run: https://app.wandb.ai/lambda-ds7/boston/runs/whw09rro"
+       "W&B Run: https://app.wandb.ai/ds8/ds9-boston/runs/jnig53cv"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 12,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "import wandb\n",
-    "from wandb.keras import WandbCallback"
+    "from wandb.keras import WandbCallback\n",
+    "wandb.init(project=\"ds9-boston\", entity=\"ds8\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 13,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -783,8 +801,8 @@
       "text/html": [
        "\n",
        "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/lambda-ds7/boston\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/lambda-ds7/boston/runs/kkgdtc31\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston/runs/kkgdtc31</a><br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/ds8/ds9-boston\" target=\"_blank\">https://app.wandb.ai/ds8/ds9-boston</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/ds8/ds9-boston/runs/bbwn49u0\" target=\"_blank\">https://app.wandb.ai/ds8/ds9-boston/runs/bbwn49u0</a><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -794,126 +812,133 @@
      "metadata": {},
      "output_type": "display_data"
     },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "E0123 14:08:53.885400 140735661650816 jupyter.py:96] Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+     ]
+    },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "Train on 270 samples, validate on 134 samples\n",
       "Epoch 1/50\n",
-      "270/270 [==============================] - 1s 3ms/sample - loss: 492.3539 - mse: 492.3539 - mae: 20.3197 - val_loss: 481.5445 - val_mse: 481.5445 - val_mae: 19.6138\n",
+      "270/270 [==============================] - 3s 10ms/sample - loss: 511.4440 - mean_squared_error: 511.4441 - mean_absolute_error: 20.7931 - val_loss: 515.5655 - val_mean_squared_error: 515.5655 - val_mean_absolute_error: 20.3873\n",
       "Epoch 2/50\n",
-      "270/270 [==============================] - 0s 591us/sample - loss: 239.4999 - mse: 239.4999 - mae: 12.8064 - val_loss: 113.8561 - val_mse: 113.8561 - val_mae: 8.2962\n",
+      "270/270 [==============================] - 0s 455us/sample - loss: 277.7767 - mean_squared_error: 277.7767 - mean_absolute_error: 14.2016 - val_loss: 144.4020 - val_mean_squared_error: 144.4020 - val_mean_absolute_error: 9.4290\n",
       "Epoch 3/50\n",
-      "270/270 [==============================] - 0s 618us/sample - loss: 56.2921 - mse: 56.2921 - mae: 5.8988 - val_loss: 62.7912 - val_mse: 62.7912 - val_mae: 5.6465\n",
+      "270/270 [==============================] - 0s 476us/sample - loss: 63.9901 - mean_squared_error: 63.9901 - mean_absolute_error: 6.2032 - val_loss: 67.0561 - val_mean_squared_error: 67.0561 - val_mean_absolute_error: 6.0540\n",
       "Epoch 4/50\n",
-      "270/270 [==============================] - 0s 613us/sample - loss: 29.4994 - mse: 29.4994 - mae: 3.9653 - val_loss: 37.9256 - val_mse: 37.9256 - val_mae: 4.1730\n",
+      "270/270 [==============================] - 0s 474us/sample - loss: 31.7344 - mean_squared_error: 31.7344 - mean_absolute_error: 4.1653 - val_loss: 42.9050 - val_mean_squared_error: 42.9050 - val_mean_absolute_error: 4.5247\n",
       "Epoch 5/50\n",
-      "270/270 [==============================] - 0s 608us/sample - loss: 20.6919 - mse: 20.6919 - mae: 3.3022 - val_loss: 31.7489 - val_mse: 31.7489 - val_mae: 3.7113\n",
+      "270/270 [==============================] - 0s 434us/sample - loss: 22.1491 - mean_squared_error: 22.1491 - mean_absolute_error: 3.4320 - val_loss: 34.7391 - val_mean_squared_error: 34.7391 - val_mean_absolute_error: 4.0192\n",
       "Epoch 6/50\n",
-      "270/270 [==============================] - 0s 602us/sample - loss: 17.2701 - mse: 17.2701 - mae: 3.0291 - val_loss: 27.3921 - val_mse: 27.3921 - val_mae: 3.4958\n",
+      "270/270 [==============================] - 0s 456us/sample - loss: 18.0860 - mean_squared_error: 18.0860 - mean_absolute_error: 3.0964 - val_loss: 30.0658 - val_mean_squared_error: 30.0658 - val_mean_absolute_error: 3.7257\n",
       "Epoch 7/50\n",
-      "270/270 [==============================] - 0s 671us/sample - loss: 15.5172 - mse: 15.5172 - mae: 2.8537 - val_loss: 25.3208 - val_mse: 25.3208 - val_mae: 3.3650\n",
+      "270/270 [==============================] - 0s 438us/sample - loss: 15.6516 - mean_squared_error: 15.6516 - mean_absolute_error: 2.8981 - val_loss: 27.2111 - val_mean_squared_error: 27.2111 - val_mean_absolute_error: 3.4985\n",
       "Epoch 8/50\n",
-      "270/270 [==============================] - 0s 661us/sample - loss: 13.7548 - mse: 13.7548 - mae: 2.7089 - val_loss: 23.8920 - val_mse: 23.8920 - val_mae: 3.2746\n",
+      "270/270 [==============================] - 0s 462us/sample - loss: 14.5151 - mean_squared_error: 14.5151 - mean_absolute_error: 2.8624 - val_loss: 25.4438 - val_mean_squared_error: 25.4438 - val_mean_absolute_error: 3.3829\n",
       "Epoch 9/50\n",
-      "270/270 [==============================] - 0s 606us/sample - loss: 12.3745 - mse: 12.3745 - mae: 2.5662 - val_loss: 22.1294 - val_mse: 22.1294 - val_mae: 3.1509\n",
+      "270/270 [==============================] - 0s 477us/sample - loss: 13.1183 - mean_squared_error: 13.1183 - mean_absolute_error: 2.6763 - val_loss: 23.7807 - val_mean_squared_error: 23.7807 - val_mean_absolute_error: 3.2335\n",
       "Epoch 10/50\n",
-      "270/270 [==============================] - 0s 614us/sample - loss: 11.2424 - mse: 11.2424 - mae: 2.4804 - val_loss: 20.5718 - val_mse: 20.5718 - val_mae: 3.0461\n",
+      "270/270 [==============================] - 0s 446us/sample - loss: 11.9549 - mean_squared_error: 11.9549 - mean_absolute_error: 2.5583 - val_loss: 21.6889 - val_mean_squared_error: 21.6889 - val_mean_absolute_error: 3.0957\n",
       "Epoch 11/50\n",
-      "270/270 [==============================] - 0s 605us/sample - loss: 10.6098 - mse: 10.6098 - mae: 2.4178 - val_loss: 20.3467 - val_mse: 20.3467 - val_mae: 3.0251\n",
+      "270/270 [==============================] - 0s 432us/sample - loss: 11.0207 - mean_squared_error: 11.0207 - mean_absolute_error: 2.5346 - val_loss: 20.8927 - val_mean_squared_error: 20.8927 - val_mean_absolute_error: 3.0125\n",
       "Epoch 12/50\n",
-      "270/270 [==============================] - 0s 576us/sample - loss: 10.0011 - mse: 10.0011 - mae: 2.3257 - val_loss: 18.4283 - val_mse: 18.4283 - val_mae: 2.8938\n",
+      "270/270 [==============================] - 0s 488us/sample - loss: 10.3182 - mean_squared_error: 10.3182 - mean_absolute_error: 2.4544 - val_loss: 19.1704 - val_mean_squared_error: 19.1704 - val_mean_absolute_error: 2.8754\n",
       "Epoch 13/50\n",
-      "270/270 [==============================] - 0s 666us/sample - loss: 9.1287 - mse: 9.1287 - mae: 2.2384 - val_loss: 18.2024 - val_mse: 18.2024 - val_mae: 2.9116\n",
+      "270/270 [==============================] - 0s 444us/sample - loss: 9.6974 - mean_squared_error: 9.6974 - mean_absolute_error: 2.3932 - val_loss: 18.7161 - val_mean_squared_error: 18.7161 - val_mean_absolute_error: 2.8210\n",
       "Epoch 14/50\n",
-      "270/270 [==============================] - 0s 603us/sample - loss: 8.6211 - mse: 8.6211 - mae: 2.1980 - val_loss: 17.4749 - val_mse: 17.4749 - val_mae: 2.8290\n",
+      "270/270 [==============================] - 0s 449us/sample - loss: 8.8680 - mean_squared_error: 8.8680 - mean_absolute_error: 2.2590 - val_loss: 18.6280 - val_mean_squared_error: 18.6280 - val_mean_absolute_error: 2.8860\n",
       "Epoch 15/50\n",
-      "270/270 [==============================] - 0s 463us/sample - loss: 8.4558 - mse: 8.4558 - mae: 2.2087 - val_loss: 17.7878 - val_mse: 17.7878 - val_mae: 2.8516\n",
+      "270/270 [==============================] - 0s 443us/sample - loss: 9.0852 - mean_squared_error: 9.0852 - mean_absolute_error: 2.2698 - val_loss: 17.8768 - val_mean_squared_error: 17.8768 - val_mean_absolute_error: 2.7953\n",
       "Epoch 16/50\n",
-      "270/270 [==============================] - 0s 626us/sample - loss: 8.3626 - mse: 8.3626 - mae: 2.2031 - val_loss: 16.7101 - val_mse: 16.7101 - val_mae: 2.7820\n",
+      "270/270 [==============================] - 0s 440us/sample - loss: 8.1243 - mean_squared_error: 8.1243 - mean_absolute_error: 2.1831 - val_loss: 17.5035 - val_mean_squared_error: 17.5035 - val_mean_absolute_error: 2.7875\n",
       "Epoch 17/50\n",
-      "270/270 [==============================] - 0s 607us/sample - loss: 7.9180 - mse: 7.9180 - mae: 2.1265 - val_loss: 16.6064 - val_mse: 16.6064 - val_mae: 2.7419\n",
+      "270/270 [==============================] - 0s 427us/sample - loss: 7.8096 - mean_squared_error: 7.8096 - mean_absolute_error: 2.1107 - val_loss: 17.0707 - val_mean_squared_error: 17.0707 - val_mean_absolute_error: 2.7358\n",
       "Epoch 18/50\n",
-      "270/270 [==============================] - 0s 479us/sample - loss: 7.5552 - mse: 7.5552 - mae: 2.0235 - val_loss: 17.2872 - val_mse: 17.2872 - val_mae: 2.8539\n",
+      "270/270 [==============================] - 0s 442us/sample - loss: 7.6900 - mean_squared_error: 7.6900 - mean_absolute_error: 2.1029 - val_loss: 17.0685 - val_mean_squared_error: 17.0685 - val_mean_absolute_error: 2.7793\n",
       "Epoch 19/50\n",
-      "270/270 [==============================] - 0s 616us/sample - loss: 7.0971 - mse: 7.0971 - mae: 2.0038 - val_loss: 16.5110 - val_mse: 16.5110 - val_mae: 2.8042\n",
+      "270/270 [==============================] - 0s 430us/sample - loss: 7.5328 - mean_squared_error: 7.5328 - mean_absolute_error: 2.0909 - val_loss: 16.7121 - val_mean_squared_error: 16.7121 - val_mean_absolute_error: 2.7111\n",
       "Epoch 20/50\n",
-      "270/270 [==============================] - 0s 606us/sample - loss: 6.7068 - mse: 6.7068 - mae: 1.9539 - val_loss: 15.5886 - val_mse: 15.5886 - val_mae: 2.7048\n",
+      "270/270 [==============================] - 0s 335us/sample - loss: 7.1977 - mean_squared_error: 7.1977 - mean_absolute_error: 2.0236 - val_loss: 16.9685 - val_mean_squared_error: 16.9685 - val_mean_absolute_error: 2.7908\n",
       "Epoch 21/50\n",
-      "270/270 [==============================] - 0s 461us/sample - loss: 6.8542 - mse: 6.8542 - mae: 1.9979 - val_loss: 17.2378 - val_mse: 17.2378 - val_mae: 2.8853\n",
+      "270/270 [==============================] - 0s 434us/sample - loss: 7.0383 - mean_squared_error: 7.0383 - mean_absolute_error: 1.9925 - val_loss: 16.4626 - val_mean_squared_error: 16.4626 - val_mean_absolute_error: 2.7221\n",
       "Epoch 22/50\n",
-      "270/270 [==============================] - 0s 474us/sample - loss: 6.5719 - mse: 6.5719 - mae: 1.9312 - val_loss: 16.3043 - val_mse: 16.3043 - val_mae: 2.7756\n",
+      "270/270 [==============================] - 0s 475us/sample - loss: 6.7591 - mean_squared_error: 6.7591 - mean_absolute_error: 1.9706 - val_loss: 16.4305 - val_mean_squared_error: 16.4305 - val_mean_absolute_error: 2.7409\n",
       "Epoch 23/50\n",
-      "270/270 [==============================] - 0s 478us/sample - loss: 6.6161 - mse: 6.6161 - mae: 1.9572 - val_loss: 15.7992 - val_mse: 15.7992 - val_mae: 2.7219\n",
+      "270/270 [==============================] - 0s 501us/sample - loss: 6.4956 - mean_squared_error: 6.4956 - mean_absolute_error: 1.9145 - val_loss: 16.1519 - val_mean_squared_error: 16.1519 - val_mean_absolute_error: 2.6834\n",
       "Epoch 24/50\n",
-      "270/270 [==============================] - 0s 491us/sample - loss: 7.1269 - mse: 7.1269 - mae: 2.0137 - val_loss: 16.5402 - val_mse: 16.5402 - val_mae: 2.8005\n",
+      "270/270 [==============================] - 0s 439us/sample - loss: 6.6810 - mean_squared_error: 6.6810 - mean_absolute_error: 1.9281 - val_loss: 16.0171 - val_mean_squared_error: 16.0171 - val_mean_absolute_error: 2.6836\n",
       "Epoch 25/50\n",
-      "270/270 [==============================] - 0s 479us/sample - loss: 6.3382 - mse: 6.3382 - mae: 1.8540 - val_loss: 16.5034 - val_mse: 16.5034 - val_mae: 2.7864\n",
+      "270/270 [==============================] - 0s 392us/sample - loss: 6.6247 - mean_squared_error: 6.6247 - mean_absolute_error: 1.9680 - val_loss: 16.8753 - val_mean_squared_error: 16.8753 - val_mean_absolute_error: 2.7521\n",
       "Epoch 26/50\n",
-      "270/270 [==============================] - 0s 488us/sample - loss: 5.9442 - mse: 5.9442 - mae: 1.8251 - val_loss: 15.6558 - val_mse: 15.6558 - val_mae: 2.7102\n",
+      "270/270 [==============================] - 0s 391us/sample - loss: 6.6399 - mean_squared_error: 6.6399 - mean_absolute_error: 1.9645 - val_loss: 16.4456 - val_mean_squared_error: 16.4456 - val_mean_absolute_error: 2.7075\n",
       "Epoch 27/50\n",
-      "270/270 [==============================] - 0s 604us/sample - loss: 5.5832 - mse: 5.5832 - mae: 1.7432 - val_loss: 15.3021 - val_mse: 15.3021 - val_mae: 2.6862\n",
+      "270/270 [==============================] - 0s 506us/sample - loss: 6.1933 - mean_squared_error: 6.1933 - mean_absolute_error: 1.8467 - val_loss: 15.8158 - val_mean_squared_error: 15.8158 - val_mean_absolute_error: 2.6389\n",
       "Epoch 28/50\n",
-      "270/270 [==============================] - 0s 436us/sample - loss: 5.4530 - mse: 5.4530 - mae: 1.7354 - val_loss: 15.4570 - val_mse: 15.4570 - val_mae: 2.6846\n",
+      "270/270 [==============================] - 0s 536us/sample - loss: 5.9027 - mean_squared_error: 5.9027 - mean_absolute_error: 1.8108 - val_loss: 15.7628 - val_mean_squared_error: 15.7628 - val_mean_absolute_error: 2.6434\n",
       "Epoch 29/50\n",
-      "270/270 [==============================] - 0s 441us/sample - loss: 5.3070 - mse: 5.3070 - mae: 1.7079 - val_loss: 15.8510 - val_mse: 15.8510 - val_mae: 2.7644\n",
+      "270/270 [==============================] - 0s 380us/sample - loss: 5.6773 - mean_squared_error: 5.6773 - mean_absolute_error: 1.7650 - val_loss: 15.9823 - val_mean_squared_error: 15.9823 - val_mean_absolute_error: 2.6589\n",
       "Epoch 30/50\n",
-      "270/270 [==============================] - 0s 477us/sample - loss: 5.4157 - mse: 5.4157 - mae: 1.7321 - val_loss: 15.9160 - val_mse: 15.9160 - val_mae: 2.7134\n",
+      "270/270 [==============================] - 0s 498us/sample - loss: 5.7518 - mean_squared_error: 5.7518 - mean_absolute_error: 1.7904 - val_loss: 15.4765 - val_mean_squared_error: 15.4766 - val_mean_absolute_error: 2.6067\n",
       "Epoch 31/50\n",
-      "270/270 [==============================] - 0s 452us/sample - loss: 5.2639 - mse: 5.2639 - mae: 1.6981 - val_loss: 15.3554 - val_mse: 15.3554 - val_mae: 2.6662\n",
+      "270/270 [==============================] - 0s 362us/sample - loss: 5.5798 - mean_squared_error: 5.5798 - mean_absolute_error: 1.7593 - val_loss: 15.9853 - val_mean_squared_error: 15.9853 - val_mean_absolute_error: 2.6804\n",
       "Epoch 32/50\n",
-      "270/270 [==============================] - 0s 475us/sample - loss: 5.7687 - mse: 5.7687 - mae: 1.8045 - val_loss: 15.7151 - val_mse: 15.7151 - val_mae: 2.6867\n",
+      "270/270 [==============================] - 0s 371us/sample - loss: 5.6638 - mean_squared_error: 5.6638 - mean_absolute_error: 1.7596 - val_loss: 16.0175 - val_mean_squared_error: 16.0175 - val_mean_absolute_error: 2.6704\n",
       "Epoch 33/50\n",
-      "270/270 [==============================] - 0s 462us/sample - loss: 5.5210 - mse: 5.5210 - mae: 1.7367 - val_loss: 15.4227 - val_mse: 15.4227 - val_mae: 2.6561\n",
+      "270/270 [==============================] - 0s 377us/sample - loss: 5.4762 - mean_squared_error: 5.4762 - mean_absolute_error: 1.7678 - val_loss: 15.5776 - val_mean_squared_error: 15.5776 - val_mean_absolute_error: 2.6187\n",
       "Epoch 34/50\n",
-      "270/270 [==============================] - 0s 474us/sample - loss: 5.5663 - mse: 5.5663 - mae: 1.7294 - val_loss: 15.3376 - val_mse: 15.3376 - val_mae: 2.6991\n",
+      "270/270 [==============================] - 0s 719us/sample - loss: 5.3426 - mean_squared_error: 5.3426 - mean_absolute_error: 1.7034 - val_loss: 15.1625 - val_mean_squared_error: 15.1625 - val_mean_absolute_error: 2.5748\n",
       "Epoch 35/50\n",
-      "270/270 [==============================] - 0s 626us/sample - loss: 5.0063 - mse: 5.0063 - mae: 1.6196 - val_loss: 15.2642 - val_mse: 15.2642 - val_mae: 2.6796\n",
+      "270/270 [==============================] - 0s 370us/sample - loss: 5.3002 - mean_squared_error: 5.3002 - mean_absolute_error: 1.7401 - val_loss: 16.3577 - val_mean_squared_error: 16.3577 - val_mean_absolute_error: 2.7189\n",
       "Epoch 36/50\n",
-      "270/270 [==============================] - 0s 459us/sample - loss: 4.7251 - mse: 4.7251 - mae: 1.5727 - val_loss: 15.4858 - val_mse: 15.4858 - val_mae: 2.7288\n",
+      "270/270 [==============================] - 0s 368us/sample - loss: 5.3941 - mean_squared_error: 5.3941 - mean_absolute_error: 1.7363 - val_loss: 15.9183 - val_mean_squared_error: 15.9183 - val_mean_absolute_error: 2.6846\n",
       "Epoch 37/50\n",
-      "270/270 [==============================] - 0s 604us/sample - loss: 4.6394 - mse: 4.6394 - mae: 1.5854 - val_loss: 15.1139 - val_mse: 15.1139 - val_mae: 2.6305\n",
+      "270/270 [==============================] - 0s 406us/sample - loss: 5.0392 - mean_squared_error: 5.0392 - mean_absolute_error: 1.6566 - val_loss: 15.3156 - val_mean_squared_error: 15.3156 - val_mean_absolute_error: 2.5823\n",
       "Epoch 38/50\n",
-      "270/270 [==============================] - 0s 592us/sample - loss: 4.5669 - mse: 4.5669 - mae: 1.5548 - val_loss: 14.9898 - val_mse: 14.9898 - val_mae: 2.6340\n",
+      "270/270 [==============================] - 0s 533us/sample - loss: 4.9307 - mean_squared_error: 4.9307 - mean_absolute_error: 1.6636 - val_loss: 15.4679 - val_mean_squared_error: 15.4679 - val_mean_absolute_error: 2.6314\n",
       "Epoch 39/50\n",
-      "270/270 [==============================] - 0s 458us/sample - loss: 4.4480 - mse: 4.4480 - mae: 1.5334 - val_loss: 15.6389 - val_mse: 15.6389 - val_mae: 2.7337\n",
+      "270/270 [==============================] - 0s 402us/sample - loss: 4.8142 - mean_squared_error: 4.8142 - mean_absolute_error: 1.6467 - val_loss: 15.2043 - val_mean_squared_error: 15.2043 - val_mean_absolute_error: 2.5763\n",
       "Epoch 40/50\n",
-      "270/270 [==============================] - 0s 455us/sample - loss: 4.4119 - mse: 4.4119 - mae: 1.5426 - val_loss: 15.0723 - val_mse: 15.0723 - val_mae: 2.6709\n",
+      "270/270 [==============================] - 0s 340us/sample - loss: 4.6058 - mean_squared_error: 4.6058 - mean_absolute_error: 1.6093 - val_loss: 15.5374 - val_mean_squared_error: 15.5374 - val_mean_absolute_error: 2.6073\n",
       "Epoch 41/50\n",
-      "270/270 [==============================] - 0s 473us/sample - loss: 4.0797 - mse: 4.0797 - mae: 1.4725 - val_loss: 15.4706 - val_mse: 15.4706 - val_mae: 2.6707\n",
+      "270/270 [==============================] - 0s 352us/sample - loss: 4.7426 - mean_squared_error: 4.7426 - mean_absolute_error: 1.6333 - val_loss: 15.9515 - val_mean_squared_error: 15.9515 - val_mean_absolute_error: 2.6920\n",
       "Epoch 42/50\n",
-      "270/270 [==============================] - 0s 449us/sample - loss: 4.0619 - mse: 4.0619 - mae: 1.4692 - val_loss: 15.2423 - val_mse: 15.2423 - val_mae: 2.6165\n",
+      "270/270 [==============================] - 0s 498us/sample - loss: 5.1322 - mean_squared_error: 5.1322 - mean_absolute_error: 1.6851 - val_loss: 16.6624 - val_mean_squared_error: 16.6624 - val_mean_absolute_error: 2.7356\n",
       "Epoch 43/50\n",
-      "270/270 [==============================] - 0s 465us/sample - loss: 4.1861 - mse: 4.1861 - mae: 1.5076 - val_loss: 15.7510 - val_mse: 15.7510 - val_mae: 2.7279\n",
+      "270/270 [==============================] - 0s 524us/sample - loss: 4.4535 - mean_squared_error: 4.4535 - mean_absolute_error: 1.5774 - val_loss: 15.4481 - val_mean_squared_error: 15.4481 - val_mean_absolute_error: 2.6467\n",
       "Epoch 44/50\n",
-      "270/270 [==============================] - 0s 462us/sample - loss: 4.1128 - mse: 4.1128 - mae: 1.4810 - val_loss: 15.4814 - val_mse: 15.4814 - val_mae: 2.6562\n",
+      "270/270 [==============================] - 0s 429us/sample - loss: 4.6129 - mean_squared_error: 4.6129 - mean_absolute_error: 1.6442 - val_loss: 16.1223 - val_mean_squared_error: 16.1223 - val_mean_absolute_error: 2.7025\n",
       "Epoch 45/50\n",
-      "270/270 [==============================] - 0s 441us/sample - loss: 4.2171 - mse: 4.2171 - mae: 1.5205 - val_loss: 16.3839 - val_mse: 16.3839 - val_mae: 2.8194\n",
+      "270/270 [==============================] - 0s 492us/sample - loss: 4.9666 - mean_squared_error: 4.9666 - mean_absolute_error: 1.6865 - val_loss: 16.5413 - val_mean_squared_error: 16.5413 - val_mean_absolute_error: 2.7663\n",
       "Epoch 46/50\n",
-      "270/270 [==============================] - 0s 422us/sample - loss: 4.2609 - mse: 4.2609 - mae: 1.5548 - val_loss: 15.3587 - val_mse: 15.3587 - val_mae: 2.7161\n",
+      "270/270 [==============================] - ETA: 0s - loss: 4.4403 - mean_squared_error: 4.4403 - mean_absolute_error: 1.64 - 0s 422us/sample - loss: 4.6433 - mean_squared_error: 4.6433 - mean_absolute_error: 1.6289 - val_loss: 15.4355 - val_mean_squared_error: 15.4355 - val_mean_absolute_error: 2.6056\n",
       "Epoch 47/50\n",
-      "270/270 [==============================] - 0s 454us/sample - loss: 4.4635 - mse: 4.4635 - mae: 1.5440 - val_loss: 15.7736 - val_mse: 15.7736 - val_mae: 2.7184\n",
+      "270/270 [==============================] - 0s 372us/sample - loss: 4.3970 - mean_squared_error: 4.3970 - mean_absolute_error: 1.5441 - val_loss: 15.8329 - val_mean_squared_error: 15.8329 - val_mean_absolute_error: 2.6976\n",
       "Epoch 48/50\n",
-      "270/270 [==============================] - 0s 426us/sample - loss: 3.7406 - mse: 3.7406 - mae: 1.4147 - val_loss: 15.6718 - val_mse: 15.6718 - val_mae: 2.7468\n",
+      "270/270 [==============================] - 0s 524us/sample - loss: 4.3391 - mean_squared_error: 4.3391 - mean_absolute_error: 1.5904 - val_loss: 15.7516 - val_mean_squared_error: 15.7516 - val_mean_absolute_error: 2.6443\n",
       "Epoch 49/50\n",
-      "270/270 [==============================] - 0s 445us/sample - loss: 3.6173 - mse: 3.6173 - mae: 1.3816 - val_loss: 15.7291 - val_mse: 15.7291 - val_mae: 2.7789\n",
+      "270/270 [==============================] - 0s 542us/sample - loss: 4.1599 - mean_squared_error: 4.1599 - mean_absolute_error: 1.5545 - val_loss: 15.2805 - val_mean_squared_error: 15.2805 - val_mean_absolute_error: 2.5957\n",
       "Epoch 50/50\n",
-      "270/270 [==============================] - 0s 430us/sample - loss: 3.6303 - mse: 3.6303 - mae: 1.4266 - val_loss: 15.4937 - val_mse: 15.4937 - val_mae: 2.7390\n"
+      "270/270 [==============================] - 0s 447us/sample - loss: 4.1242 - mean_squared_error: 4.1242 - mean_absolute_error: 1.5466 - val_loss: 15.3044 - val_mean_squared_error: 15.3044 - val_mean_absolute_error: 2.5959\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "<tensorflow.python.keras.callbacks.History at 0x7f315c319be0>"
+       "<tensorflow.python.keras.callbacks.History at 0x12f45c080>"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 13,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "wandb.init(project=\"boston\", entity=\"lambda-ds7\") #Initializes and Experiment\n",
+    "wandb.init(project=\"ds9-boston\", entity=\"ds8\") #Initializes and Experiment\n",
     "\n",
     "# Important Hyperparameters\n",
     "X =  x_train\n",
@@ -1153,9 +1178,9 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "conda_tensorflow_p36",
+   "display_name": "U4-S2-NN(v1)",
    "language": "python",
-   "name": "conda_tensorflow_p36"
+   "name": "u4-s2-nn"
   },
   "language_info": {
    "codemirror_mode": {
@@ -1167,7 +1192,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.6.5"
+   "version": "3.7.0"
   }
  },
  "nbformat": 4,
